{
  "author": {
    "name": "Jed Schmidt",
    "email": "tr@nslator.jp",
    "url": "http://jed.is"
  },
  "name": "emit",
  "description": "A reactive toolkit for JavaScript",
  "version": "0.0.2",
  "keywords": [
    "functional",
    "reactive",
    "emitter",
    "emit"
  ],
  "homepage": "https://emitjs.org",
  "repository": {
    "type": "git",
    "url": "git://github.com/jed/emit.git"
  },
  "engines": {
    "node": "~0.6.6"
  },
  "dependencies": {},
  "devDependencies": {},
  "readme": "(  ( (emit) )  )\n================\n\n(emit) is a [functional reactive programming][frp] toolkit based on JavaScript primitives, allowing you to compose functional applications using the APIs you already know.\n\n(emit) is a very rough work in progress. It can run both in the browser and on [node.js][node].\n\nExample\n-------\n\n```javascript\nemit = require(\"emit\")\n\n// emit method APIs are identical to their native counterparts...\nMath.pow(2, 2)       // 4\nemit.Math.pow(2, 2)  // 4\n \nArray(1, 2, 3)       // [1, 2, 3]\nemit.Array(1, 2, 3)  // [1, 2, 3]\n \n1 / 2                // .5\nemit.ops[\"/\"](1, 2)  // .5\n\n// with one exception: emit methods can also take functions, which are\n// treated as yet-unevaluated values that can be \"watched\". All emit\n// methods compose these (possibly unevaluated) values into a single\n// value; if any of these values are functions, the returned value will\n// also be a function.\n\n// Here's an example of such a function; it reports an incremented number\n// back to its listener every second.\nfunction count(cb) {\n  var send = function(){ cb(null, i++) }\n  \t, i = 0\n\n  send()\n  setInterval(send, 1000)\n}\n\n// Since the value reported by count changes every second, so does\n// the value of any method that uses it. So these are all functions:\nemit.Math.pow(2, count)  // [Function]\nemit.Array(1, 2, count)  // [Function]\nemit.ops[\"/\"](1, count)  // [Function]\n\n// We can observe these changing values through the console.\nfunction log(e, data){ console.log(e || data) }\n\nemit.Math.pow(2, count)(log)  // 1, 2, 4, 8, 16, 32...\nemit.Array(1, 2, count)(log)  // [1, 2, 0], [1, 2, 1], [1, 2, 2]...\nemit.ops[\"/\"](1, count)(log)  // Infinity, 1, .5, .25...\n\n// Now we can now start to compose these into increasingly\n// complex values.\nrandom   = emit.Math.random(ping)\nrandBin  = emit.Math.round(random)\ncoinToss = emit.ops[\"?:\"](randBin, \"heads\", \"tails\")\nmessage  = emit.ops[\"+\"](\"The coin landed on \", coinToss)\n\nmessage(log)  // \"The coin landed on heads\"\n              // \"The coin landed on tails\"\n              // \"The coin landed on heads\"\n              // ...\n```\n\nInstallation\n------------\n\nTo install, head to your terminal and enter:\n\n    npm install emit\n\nSupport\n-------\n\n### Current\n\n- `Array`: all ES3/ES5 methods\n- `Function`: `apply`, and `call`\n- `Math`: all statics and function\n- operators: most accessors, including `!`, `~`, `typeof`, `void`, `*`, `/`, `%`, `+`, `-`, `<<`, `>>`, `>>>`, `<`, `<=`, `>`, `>=`, `==`, `!=`, `===`, `!==`, `&`, `^`, `|`, `&&`, `||`, `, `, `?:`, `[]`, and `in`\n\n### Planned\n\n- RegExp, String, Date, Number, Boolean\n- Function::bind\n- DOM/HTML\n- DOM events\n- JSON\n- node.js file system, etc.\n\nLicense\n-------\n\nCopyright (c) 2012 Jed Schmidt, http://jed.is/\n \nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n\"Software\"), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n \nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n \nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND\nNONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE\nLIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION\nOF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION\nWITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n\n[frp]: http://en.wikipedia.org/wiki/Functional_reactive_programming\n[node]: http://nodejs.org/\n[flapjax]: http://www.flapjax-lang.org/\n[tangle]: http://worrydream.com/Tangle/\n[spreadsheet]: http://en.wikipedia.org/wiki/Spreadsheet",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/jed/emit/issues"
  },
  "_id": "emit@0.0.2",
  "dist": {
    "shasum": "1be0e2bf5084341d47ea39c3d8af8b41a878e446"
  },
  "_from": "emit@",
  "_resolved": "https://registry.npmjs.org/emit/-/emit-0.0.2.tgz"
}
